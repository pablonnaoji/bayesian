import numpy as np
import pymc3 as pm
import theano.tensor as tt
from scipy.optimize import minimize
current_data = np.array([-0.021310425, -0.020834351, -0.020373535, -0.019924927, -0.019497681, -0.01907959, -0.018682861, -0.018301392, -0.017935181, -0.017581177, -0.01723938, -0.016915894, -0.016598511, -0.016296387, -0.015997314, -0.015710449, -0.015432739, -0.015161133, -0.014898682, -0.014642334, -0.014398193, -0.014160156, -0.013931274, -0.013705444, -0.013482666, -0.013269043, -0.013061523, -0.012866211, -0.01267395, -0.012487793, -0.012307739, -0.012130737, -0.011959839, -0.01178894, -0.011627197, -0.011462402, -0.011306763, -0.011151123, -0.010998535, -0.010848999, -0.010702515, -0.010559082, -0.010415649, -0.01027832, -0.010140991, -0.010006714, -0.009872437, -0.009741211, -0.009613037, -0.009484863, -0.009362793, -0.009234619, -0.009112549, -0.008990479, -0.00887146, -0.008752441, -0.008633423, -0.008520508, -0.008404541, -0.008291626, -0.008178711, -0.008065796, -0.007955933, -0.007846069, -0.007739258, -0.007629395, -0.007525635, -0.007418823, -0.007312012, -0.007208252, -0.00710144, -0.007000732, -0.006893921, -0.006796265, -0.006689453, -0.006588745, -0.006484985, -0.006381226, -0.006283569, -0.00617981, -0.006079102, -0.005978394, -0.005874634, -0.005773926, -0.005670166, -0.00557251, -0.005465698, -0.005368042, -0.005264282, -0.005163574, -0.005059814, -0.004959412, -0.004857788, -0.004751587, -0.004649658, -0.004542542, -0.004442749, -0.004336853, -0.00422821, -0.00412323])
potential_data = np.array([0.003210449, 0.005603027, 0.00821228, 0.010739136, 0.012997437, 0.015423584, 0.017874146, 0.020346069, 0.022497559, 0.02517395, 0.027786255, 0.029888916, 0.032424927, 0.034994507, 0.03717041, 0.039880371, 0.042297363, 0.044766235, 0.047302246, 0.049655151, 0.051940918, 0.05456543, 0.056793213, 0.059387207, 0.061828613, 0.063964844, 0.066894531, 0.069213867, 0.071594238, 0.074127197, 0.076171875, 0.078979492, 0.081359863, 0.083374023, 0.086120605, 0.088806152, 0.091033936, 0.093688965, 0.096008301, 0.098358154, 0.100952148, 0.103271484, 0.105895996, 0.108306885, 0.110809326, 0.11328125, 0.115356445, 0.117614746, 0.120025635, 0.122772217, 0.125183105, 0.127960205, 0.130157471, 0.132568359, 0.135101318, 0.137176514, 0.139953613, 0.142089844, 0.144836426, 0.147125244, 0.149932861, 0.151916504, 0.154937744, 0.156982422, 0.159393311, 0.161956787, 0.164245605, 0.16696167, 0.169311523, 0.172058105, 0.174224854, 0.176696777, 0.178985596, 0.181549072, 0.183898926, 0.18637085, 0.188690186, 0.190856934, 0.193695068, 0.195922852, 0.198486328, 0.20111084, 0.203582764, 0.205749512, 0.208526611, 0.210449219, 0.213134766, 0.215454102, 0.218139648, 0.220489502, 0.222930908, 0.225097656, 0.228240967, 0.23046875, 0.232666016, 0.235198975, 0.237792969, 0.24017334, 0.242340088, 0.244934082])

with pm.Model() as model:
    slope = pm.Normal('slope', mu=0, sigma=1)
    intercept = pm.Normal('intercept', mu=0, sigma=1)
    sigma = pm.HalfNormal('sigma', sigma=1)
    mu = slope * current_data + intercept
    Y_obs = pm.Normal('Y_obs', mu=mu, sigma=sigma, observed=potential_data)
    
    # Find the MAP estimate
    map_estimate = pm.find_MAP()

    # Print the optimized parameters
    print("Optimized parameters:")
    print("Slope:", map_estimate['slope'])
    print("Intercept:", map_estimate['intercept'])
    print("Sigma:", map_estimate['sigma_log__'])
      
#with pm.Model() as model:
    #slope = pm.Normal('slope', mu=0, sigma=1)
    #intercept = pm.Normal('intercept', mu=0, sigma=1)
    #sigma = pm.HalfNormal('sigma', sigma=1)
    #mu = slope * current_data + intercept
    #Y_obs = pm.Normal('Y_obs', mu=mu, sigma=sigma, observed=potential_data)
    #map_estimate = pm.find_MAP()
    #res = minimize(lambda x: -model.logp(x), map_estimate)
    #print("Optimized parameters:")
    #print("Slope:", res.x[0])
    #print("Intercept:", res.x[1])
    #print("Sigma:", res.x[2])
